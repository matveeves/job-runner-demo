// <auto-generated />
using System;
using JobRunner.Demo.Infrastructure.Persistence.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JobRunner.Demo.Infrastructure.Persistence.EfCore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JobRunner.Demo.Domain.Entities.TaskQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()")
                        .HasComment("Идентификатор");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("s_create_date")
                        .HasComment("Дата создания");

                    b.Property<string>("Creator")
                        .HasColumnType("text")
                        .HasColumnName("s_creator")
                        .HasComment("Создатель");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("d_end_date")
                        .HasComment("Дата завершения");

                    b.Property<bool>("IsManual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("b_is_manual")
                        .HasComment("Признак ручного запуска");

                    b.Property<string>("JError")
                        .HasColumnType("jsonb")
                        .HasColumnName("j_error")
                        .HasComment("Информация об ошибке в формате JSON");

                    b.Property<string>("JPayload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("j_payload")
                        .HasComment("Параметры запуска в формате JSON");

                    b.Property<DateTime?>("ModifDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("s_modif_date")
                        .HasComment("Дата изменения");

                    b.Property<string>("Owner")
                        .HasColumnType("text")
                        .HasColumnName("s_owner")
                        .HasComment("Владелец");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("n_retry_count")
                        .HasComment("Количество попыток перезапуска задачи");

                    b.Property<DateTime?>("StartByDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("d_start_by_date")
                        .HasComment("Запуск по времени (дата и время запуска)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("d_start_date")
                        .HasComment("Дата запуска");

                    b.Property<Guid>("TaskScheduleId")
                        .HasColumnType("uuid")
                        .HasColumnName("f_schedule")
                        .HasComment("Идентификатор конфигурации");

                    b.Property<Guid>("TaskStatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("f_status")
                        .HasComment("Идентификатор статуса");

                    b.HasKey("Id");

                    b.HasIndex("TaskScheduleId");

                    b.HasIndex("TaskStatusId");

                    b.ToTable("cd_task_queue", "jobs", t =>
                        {
                            t.HasComment("Очередь задач");
                        });
                });

            modelBuilder.Entity("JobRunner.Demo.Domain.Entities.TaskSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()")
                        .HasComment("Идентификатор");

                    b.Property<int>("ConcurrencyLimitPerIteration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(20)
                        .HasColumnName("n_concurrency_limit")
                        .HasComment("Количество параллельных задач, обрабатываемых за один проход");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("s_create_date")
                        .HasComment("Дата создания");

                    b.Property<string>("Creator")
                        .HasColumnType("text")
                        .HasColumnName("s_creator")
                        .HasComment("Создатель");

                    b.Property<string>("CronExpression")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_cron_expression")
                        .HasComment("Cron-выражение");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("c_description")
                        .HasComment("Описание");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("b_is_enabled")
                        .HasComment("Признак активности");

                    b.Property<string>("JCustomParams")
                        .HasColumnType("jsonb")
                        .HasColumnName("j_custom_params")
                        .HasComment("Дополнительные параметры в формате JSON");

                    b.Property<int>("MaxItemsPerIteration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(50)
                        .HasColumnName("n_max_items_per_iteration")
                        .HasComment("Количество задач из очереди, обрабатываемых за один проход");

                    b.Property<int>("MaxRetries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(3)
                        .HasColumnName("n_max_retries")
                        .HasComment("Количество попыток повторного запуска задачи");

                    b.Property<DateTime?>("ModifDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("s_modif_date")
                        .HasComment("Дата изменения");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_name")
                        .HasComment("Название");

                    b.Property<string>("Owner")
                        .HasColumnType("text")
                        .HasColumnName("s_owner")
                        .HasComment("Владелец");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("cs_task_schedules", "jobs", t =>
                        {
                            t.HasComment("Конфигурация задач");

                            t.HasCheckConstraint("chk_cs_task_schedules_c_name_valid", "c_name ~ '^[a-zA-Z0-9_-]+$'");
                        });
                });

            modelBuilder.Entity("JobRunner.Demo.Domain.Entities.TaskStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()")
                        .HasComment("Идентификатор");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_code")
                        .HasComment("Код");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("s_create_date")
                        .HasComment("Дата создания");

                    b.Property<string>("Creator")
                        .HasColumnType("text")
                        .HasColumnName("s_creator")
                        .HasComment("Создатель");

                    b.Property<DateTime?>("ModifDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("s_modif_date")
                        .HasComment("Дата изменения");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_name")
                        .HasComment("Название");

                    b.Property<string>("Owner")
                        .HasColumnType("text")
                        .HasColumnName("s_owner")
                        .HasComment("Владелец");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("cs_task_statuses", "jobs", t =>
                        {
                            t.HasComment("Статусы задач");

                            t.HasCheckConstraint("chk_cs_task_statuses_c_code_valid", "c_code ~ '^[a-zA-Z0-9_-]+$'");
                        });
                });

            modelBuilder.Entity("JobRunner.Demo.Domain.Entities.TaskQueue", b =>
                {
                    b.HasOne("JobRunner.Demo.Domain.Entities.TaskSchedule", "TaskSchedule")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobRunner.Demo.Domain.Entities.TaskStatus", "TaskStatus")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskSchedule");

                    b.Navigation("TaskStatus");
                });

            modelBuilder.Entity("JobRunner.Demo.Domain.Entities.TaskSchedule", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("JobRunner.Demo.Domain.Entities.TaskStatus", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
